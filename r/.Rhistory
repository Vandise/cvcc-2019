library('ROSE')
library(ResourceSelection)
library(VIF)
loan_data <- read.csv("../data/loans.csv", header = T)
summary(loan_data)
loan_data$loan_status[loan_data$status == 'Charged Off' || loan_data$status == 'Default'] <- 'Bad'
loan_data$loan_status[loan_data$status == 'Fully Paid'] <- 'Good'
loan_data$loan_status <- as.factor(loan_data$loan_status)
# print out results
loan_data %>% group_by(loan_status) %>% summarise(no_rows = length(loan_status))
loan_data <- loan_data[ , -which(names(loan_data) %in% c("loanID","employment", "state"))]
plot(loan_data$length, col="blue", main="Histogram of Employment Length - Before")
xfit<-seq(min(as.numeric(loan_data$length)),max(as.numeric(loan_data$length)),length=500)
yfit<-dnorm(xfit,mean=mean(as.numeric(loan_data$length)),sd=sd(as.numeric(loan_data$length)))
yfit <- yfit*diff(h$mids[1:2])*length(as.numeric(loan_data$length))
vif(loan_data.model.full)
set.seed(312)
#names(subset(loan_data))
loan_data.selected_fields <- subset(loan_data, select = c(1, 3, 5:8, 11:14, 16:18, 27, 30))
sample_data <- sample.split(loan_data.selected_fields$loan_status, 0.80)
loan_data.training.data <- subset(loan_data.selected_fields, sample_data == TRUE)
loan_data.test.data <- subset(loan_data.selected_fields, sample_data == FALSE)
loan_data.model.full <- glm(loan_status ~ ., data = loan_data.training.data, family = "binomial")
summary(loan_data.model.full)
threshold = 0.5
prob_full <- predict(loan_data.model.full, newdata = loan_data.test.data, type = "response")
threshold = 0.5
prob_full <- predict(loan_data.model.full, newdata = loan_data.test.data, type = "response")
set.seed(312)
#names(subset(loan_data))
loan_data.selected_fields <- subset(loan_data, select = c(1, 3, 5:8, 11:14, 16:18, 27, 30))
sample_data <- sample.split(loan_data.selected_fields$loan_status, 0.80)
loan_data.training.data <- subset(loan_data.selected_fields, sample_data == TRUE)
loan_data.test.data <- subset(loan_data.selected_fields, sample_data == FALSE)
loan_data.model.full <- glm(loan_status ~ ., data = loan_data.training.data, family = "binomial")
summary(loan_data.model.full)
threshold = 0.5
prob_full <- predict(loan_data.model.full, newdata = loan_data.test.data, type = "response")
#knitr::opts_chunk$set(echo = TRUE)
#install.packages("ResourceSelection")
#install.packages("tidyverse")
#install.packages('caTools')
#devtools::install_github("sachsmc/plotROC")
#install.packages("data.table")
#library(plotROC)
library(caTools)
library(purrr)
library(plyr)
library(dplyr)
library(ggplot2)
library(gridExtra)
library(ROCR)
require(HH)
library(pscl)
library(caret)
library('ROSE')
library(ResourceSelection)
loan_data <- read.csv("data/loans.csv", header = T)
#knitr::opts_chunk$set(echo = TRUE)
#install.packages("VIF")
#install.packages('caTools')
#devtools::install_github("sachsmc/plotROC")
#library(plotROC)
library(caTools)
library(purrr)
library(plyr)
library(dplyr)
library(ggplot2)
library(gridExtra)
#library(cowplot)
library(ROCR)
require(HH)
library(pscl)
library(caret)
library('ROSE')
library(ResourceSelection)
library(VIF)
loan_data <- read.csv("../data/loans.csv", header = T)
summary(loan_data)
loan_data$loan_status[loan_data$status == 'Charged Off' || loan_data$status == 'Default'] <- 'Bad'
loan_data$loan_status[loan_data$status == 'Fully Paid'] <- 'Good'
loan_data$loan_status <- as.factor(loan_data$loan_status)
# print out results
loan_data %>% group_by(loan_status) %>% summarise(no_rows = length(loan_status))
loan_data <- loan_data[ , -which(names(loan_data) %in% c("loanID","employment", "state"))]
plot(loan_data$length, col="blue", main="Histogram of Employment Length - Before")
xfit<-seq(min(as.numeric(loan_data$length)),max(as.numeric(loan_data$length)),length=500)
yfit<-dnorm(xfit,mean=mean(as.numeric(loan_data$length)),sd=sd(as.numeric(loan_data$length)))
yfit <- yfit*diff(h$mids[1:2])*length(as.numeric(loan_data$length))
library(dplyr)
#knitr::opts_chunk$set(echo = TRUE)
#install.packages("VIF")
#install.packages('caTools')
#devtools::install_github("sachsmc/plotROC")
#library(plotROC)
library(caTools)
library(purrr)
library(plyr)
library(dplyr)
library(ggplot2)
library(gridExtra)
#library(cowplot)
library(ROCR)
require(HH)
library(pscl)
library(caret)
library('ROSE')
library(ResourceSelection)
library(VIF)
loan_data <- read.csv("../data/loans.csv", header = T)
summary(loan_data)
loan_data$loan_status[loan_data$status == 'Charged Off' || loan_data$status == 'Default'] <- 'Bad'
loan_data$loan_status[loan_data$status == 'Fully Paid'] <- 'Good'
loan_data$loan_status <- as.factor(loan_data$loan_status)
# print out results
loan_data %>% group_by(loan_status) %>% summarise(no_rows = length(loan_status))
# print out results
loan_data %>% group_by(loan_status) %>% summarise(no_rows = length(loan_status))
loan_data <- loan_data[ , -which(names(loan_data) %in% c("loanID","employment", "state"))]
loan_data <- loan_data[ , -which(names(loan_data) %in% c("loanID","employment", "state"))]
plot(loan_data$length, col="blue", main="Histogram of Employment Length - Before")
plot(loan_data$length, col="blue", main="Histogram of Employment Length - Before")
plot(loan_data$length, col="blue", main="Histogram of Employment Length - Before")
from <- c('n/a', '< 1 year', '1 year', '2 years', '3 years', '4 years', '5 years',
'6 years', '7 years', '8 years', '9 years', '10+ years')
to <- c("missing", '< 1 year', '1 to 3 years', '1 to 3 years', '1 to 3 years', '4 to 6 years', '4 to 6 years', '4 to 6 years', '7 to 9 years', '7 to 9 years', '7 to 9 years', '10+ years')
loan_data$length <- mapvalues(loan_data$length, from = from, to = to)
loan_data$length <- as.factor(loan_data$length)
summary(loan_data$length)
plot(loan_data$income)
plot(catresult)
loan_data <- read.csv("../data/loans.csv", header = T)
loan_data <- read.csv("../data/loans.csv", header = T)
summary(loan_data)
summary(loan_data)
loan_data$loan_status[loan_data$status == 'Charged Off' || loan_data$status == 'Default'] <- 'Bad'
loan_data$loan_status[loan_data$status == 'Fully Paid'] <- 'Good'
loan_data$loan_status <- as.factor(loan_data$loan_status)
# print out results
loan_data %>% group_by(loan_status) %>% summarise(no_rows = length(loan_status))
loan_data <- loan_data[ , -which(names(loan_data) %in% c("loanID","employment", "state"))]
plot(loan_data$length, col="blue", main="Histogram of Employment Length - Before")
xfit<-seq(min(as.numeric(loan_data$length)),max(as.numeric(loan_data$length)),length=500)
yfit<-dnorm(xfit,mean=mean(as.numeric(loan_data$length)),sd=sd(as.numeric(loan_data$length)))
yfit <- yfit*diff(h$mids[1:2])*length(as.numeric(loan_data$length))
from <- c('n/a', '< 1 year', '1 year', '2 years', '3 years', '4 years', '5 years',
'6 years', '7 years', '8 years', '9 years', '10+ years')
to <- c("missing", '< 1 year', '1 to 3 years', '1 to 3 years', '1 to 3 years', '4 to 6 years', '4 to 6 years', '4 to 6 years', '7 to 9 years', '7 to 9 years', '7 to 9 years', '10+ years')
loan_data$length <- mapvalues(loan_data$length, from = from, to = to)
loan_data$length <- as.factor(loan_data$length)
#plot(loan_data$length, col="blue", main="Histogram of Employment Length")
hist(as.numeric(loan_data$length))
xfit<-seq(min(as.numeric(loan_data$length)),max(as.numeric(loan_data$length)),length=500)
yfit<-dnorm(xfit,mean=mean(as.numeric(loan_data$length)),sd=sd(as.numeric(loan_data$length)))
yfit <- yfit*diff(h$mids[1:2])*length(as.numeric(loan_data$length))
plot(loan_data$income)
loan_data$income_cat[ loan_data$income < 9700 ] <- "< 9700"
loan_data$income_cat[ loan_data$income >= 9700 & loan_data$income <= 39475 ] <- "9700 - 39475"
loan_data$income_cat[ loan_data$income > 39475 & loan_data$income <= 84200 ] <- "39476 - 84200"
loan_data$income_cat[ loan_data$income > 84200 & loan_data$income <= 160725 ] <- "84200 - 160725"
loan_data$income_cat[ loan_data$income > 160726 & loan_data$income <= 204101 ] <- "160726 - 204101"
loan_data$income_cat[ loan_data$income > 204101 & loan_data$income <= 510300 ] <- "204102 - 510300"
loan_data$income_cat[ loan_data$income > 510300 ] <- "> 510300"
loan_data$income_cat <- as.factor(loan_data$income_cat)
summary(loan_data$income_cat)
catresult <- c( 1, 11, 7400, 27405, 13071, 1124, 926, 62)
plot(catresult)
loan_data <- loan_data[!(loan_data$status %in% c('Current', 'Late (16-30 days)', 'Late (31-120 days)')),]
loan_data <- loan_data[!is.na(loan_data$amount), ]
loan_data <- loan_data[!is.na(loan_data$rate), ]
loan_data <- loan_data[!is.na(loan_data$payment), ]
loan_data <- loan_data[!is.na(loan_data$income), ]
loan_data <- loan_data[!is.na(loan_data$length), ]
summary(loan_data)
m <- summary(loan_data$revolRatio)[[3]]
loan_data <- (loan_data %>% mutate(
revolRatio = coalesce(revolRatio, m)
))
m <- as.integer(summary(loan_data$bcOpen)[[3]])
loan_data <- (loan_data %>% mutate(
bcOpen = coalesce(bcOpen, m)
))
m <- as.double(summary(loan_data$bcRatio)[[3]])
loan_data <- (loan_data %>% mutate(
bcRatio = coalesce(bcRatio, m)
))
summary(loan_data)
cor(loan_data[, sapply(loan_data, class) != 'factor' ]) # factors can't be in correlation
hist(loan_data$income, main="Figure 1 - Initial Income Histogram", xlab="Income")
loan_sd <- sd(loan_data$income)*sqrt((length(loan_data$income)-1)/(length(loan_data$income)))
loan_data$income_zscore <- (loan_data$income - mean(loan_data$income)) / loan_sd
summary(loan_data$income_zscore)
loan_data$income[ loan_data$income_zscore > 4 ] <- median(loan_data$income, na.rm=TRUE)
loan_data$income[ loan_data$income_zscore < -4 ] <- median(loan_data$income, na.rm=TRUE)
hist(loan_data$income, main="Figure 2 - Income within +- 4 Std Deviations", xlab="Income")
boxplot(loan_data$income, main="Figure 3 - Income within +- 4 Std Deviations",  ylab="Income")
loan_data$income_sqrt <- sqrt(loan_data$income)
hist(loan_data$income_sqrt, main="Figure 4 - Sqrt of Income", xlab="Sqrt - Income")
set.seed(312)
#names(subset(loan_data))
loan_data.selected_fields <- subset(loan_data, select = c(1, 3, 5:8, 11:14, 16:18, 27, 30))
sample_data <- sample.split(loan_data.selected_fields$loan_status, 0.80)
loan_data.training.data <- subset(loan_data.selected_fields, sample_data == TRUE)
loan_data.test.data <- subset(loan_data.selected_fields, sample_data == FALSE)
loan_data.model.full <- glm(loan_status ~ ., data = loan_data.training.data, family = "binomial")
summary(loan_data.model.full)
threshold = 0.5
prob_full <- predict(loan_data.model.full, newdata = loan_data.test.data, type = "response")
prob_cut <- ifelse(prob_full > threshold, 'Good', 'Bad')
cTab <- table(prob_cut, loan_data.test.data$loan_status)
v <- sum(diag(cTab)) / sum(cTab)
print(paste('Proportion correctly predicted = ', v))
vif(loan_data.model.full)
vif(loan_data.model.full)
vif(loan_data.model.full)
#knitr::opts_chunk$set(echo = TRUE)
#install.packages("ResourceSelection")
#install.packages("tidyverse")
#install.packages('caTools')
#devtools::install_github("sachsmc/plotROC")
#install.packages("data.table")
#library(plotROC)
library(caTools)
library(purrr)
library(plyr)
library(dplyr)
library(ggplot2)
library(gridExtra)
library(ROCR)
require(HH)
library(pscl)
library(caret)
library('ROSE')
library(ResourceSelection)
loan_data <- read.csv("data/loans.csv", header = T)
#knitr::opts_chunk$set(echo = TRUE)
#install.packages("ResourceSelection")
#install.packages("tidyverse")
#install.packages('caTools')
#devtools::install_github("sachsmc/plotROC")
#install.packages("data.table")
#library(plotROC)
library(caTools)
library(purrr)
library(plyr)
library(dplyr)
library(ggplot2)
library(gridExtra)
library(ROCR)
require(HH)
library(pscl)
library(caret)
library('ROSE')
library(ResourceSelection)
loan_data <- read.csv("../data/loans.csv", header = T)
loan_data$loan_status[loan_data$status == 'Charged Off' || loan_data$status == 'Default'] <- 'Bad'
loan_data$loan_status[loan_data$status == 'Fully Paid'] <- 'Good'
loan_data$loan_status <- as.factor(loan_data$loan_status)
loan_data %>% group_by(loan_status) %>% summarise(no_rows = length(loan_status))
loan_data <- loan_data[ , -which(names(loan_data) %in% c("loanID","employment", "state"))]
from <- c('n/a', '< 1 year', '1 year', '2 years', '3 years', '4 years', '5 years',
'6 years', '7 years', '8 years', '9 years', '10+ years')
to <- c("missing", '< 1 year', '1 to 3 years', '1 to 3 years', '1 to 3 years', '4 to 6 years', '4 to 6 years', '4 to 6 years', '7 to 9 years', '7 to 9 years', '7 to 9 years', '10+ years')
loan_data$length <- mapvalues(loan_data$length, from = from, to = to)
loan_data$length <- as.factor(loan_data$length)
plot(loan_data$length, col="blue", main="Histogram of Employment Length")
summary(loan_data$length)
plot(loan_data$income)
loan_data$income_cat[ loan_data$income < 9700 ] <- "< 9700"
loan_data$income_cat[ loan_data$income >= 9700 & loan_data$income <= 39475 ] <- "9700 - 39475"
loan_data$income_cat[ loan_data$income > 39475 & loan_data$income <= 84200 ] <- "39476 - 84200"
loan_data$income_cat[ loan_data$income > 84200 & loan_data$income <= 160725 ] <- "84200 - 160725"
loan_data$income_cat[ loan_data$income > 160726 & loan_data$income <= 204101 ] <- "160726 - 204101"
loan_data$income_cat[ loan_data$income > 204101 & loan_data$income <= 510300 ] <- "204102 - 510300"
loan_data$income_cat[ loan_data$income > 510300 ] <- "> 510300"
loan_data$income_cat <- as.factor(loan_data$income_cat)
summary(loan_data$income_cat)
loan_data <- loan_data[!(loan_data$status %in% c('Current', 'Late (16-30 days)', 'Late (31-120 days)')),]
loan_data <- loan_data[!is.na(loan_data$amount), ]
loan_data <- loan_data[!is.na(loan_data$rate), ]
loan_data <- loan_data[!is.na(loan_data$payment), ]
loan_data <- loan_data[!is.na(loan_data$income), ]
loan_data <- loan_data[!is.na(loan_data$length), ]
summary(loan_data)
m <- summary(loan_data$revolRatio)[[3]]
loan_data <- (loan_data %>% mutate(
revolRatio = coalesce(revolRatio, m)
))
m <- as.integer(summary(loan_data$bcOpen)[[3]])
loan_data <- (loan_data %>% mutate(
bcOpen = coalesce(bcOpen, m)
))
m <- as.double(summary(loan_data$bcRatio)[[3]])
loan_data <- (loan_data %>% mutate(
bcRatio = coalesce(bcRatio, m)
))
summary(loan_data)
hist(loan_data$income, main="Figure 1 - Initial Income Histogram", xlab="Income")
loan_sd <- sd(loan_data$income)*sqrt((length(loan_data$income)-1)/(length(loan_data$income)))
loan_data$income_zscore <- (loan_data$income - mean(loan_data$income)) / loan_sd
summary(loan_data$income_zscore)
loan_data$income[ loan_data$income_zscore > 4 ] <- median(loan_data$income, na.rm=TRUE)
loan_data$income[ loan_data$income_zscore < -4 ] <- median(loan_data$income, na.rm=TRUE)
hist(loan_data$income, main="Figure 2 - Income within +- 4 Std Deviations", xlab="Income")
boxplot(loan_data$income, main="Figure 3 - Income within +- 4 Std Deviations",  ylab="Income")
loan_data$income_sqrt <- sqrt(loan_data$income)
hist(loan_data$income_sqrt, main="Figure 4 - Sqrt of Income", xlab="Sqrt - Income")
hist(loan_data$amount, main="Figure 5 - Loan Amounts", xlab="Amount")
qqnorm(loan_data$amount,
ylab = "Loam Amounts",
xlab = "Scores",
main = "Difference in Loan Amounts"
); qqline(loan_data$amount)
loan_data$amount_sqrt <- sqrt(loan_data$amount)
layout(mat = matrix(c(1,2),2,1, byrow=TRUE),  height = c(1,8))
par(mar=c(0, 3.1, 1.1, 2.1))
boxplot(loan_data$amount_sqrt, horizontal = TRUE)
par(mar=c(4, 3.1, 1.1, 2.1))
hist(loan_data$amount_sqrt, main="Figure 6 - Loan Amounts", xlab="Amount Sqrt")
par(mfrow=c(1,2))
unverified_loans <- loan_data[ loan_data$verified == "Not Verified", ]
verified_loans <- loan_data[ loan_data$verified == "Verified" | loan_data$verified == "Source Verified", ]
verified_tbl <- table(verified_loans$loan_status)
#   Bad  Good
#   6142 18483 -> 0.33
unverified_tbl <- table(unverified_loans$loan_status)
# Bad Good
# 1700 8591 -> 0.198
barplot(table(unverified_loans$loan_status), main="Figure 8 - Unverified Loans")
barplot(table(verified_loans$loan_status), main="Figure 9 - Verified Loans")
library(ggplot2)
reason_tbl <- table(loan_data$reason, loan_data$loan_status)
ggplot(as.data.frame(reason_tbl), aes(x=Var1, y = Freq, fill=Var2)) +
labs(title = "Loan Status by Reason", x = "Loan Reason", y = "Total Loans", color = "Loan Status") +
geom_bar(stat="identity", position = "dodge") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_discrete(name = "Loan Status")
debt_consol_data <- loan_data
debt_consol_data$debtIncRat[ debt_consol_data$debtIncRat < 10 ] <- "< 10%"
debt_consol_data$debtIncRat[ debt_consol_data$debtIncRat >= 10 & debt_consol_data$debtIncRat <= 25 ] <- "10% - 25%"
debt_consol_data$debtIncRat[ debt_consol_data$debtIncRat > 25 & debt_consol_data$debtIncRat <= 33 ] <- "25% - 33%"
debt_consol_data$debtIncRat[ debt_consol_data$debtIncRat > 33 & debt_consol_data$debtIncRat <= 50 ] <- "33% - 50%"
debt_consol_data$debtIncRat[ debt_consol_data$debtIncRat > 50 & debt_consol_data$debtIncRat <= 66 ] <- "50% - 66%"
debt_consol_data$debtIncRat[ debt_consol_data$debtIncRat > 66 & debt_consol_data$debtIncRat <= 75 ] <- "66% - 75%"
debt_consol_data$debtIncRat[ debt_consol_data$debtIncRat > 75 & debt_consol_data$debtIncRat <= 90 ] <- "75% - 90%"
debt_consol_data$debtIncRat[ debt_consol_data$debtIncRat > 90 ] <- "> 90%"
dbt_ratio_tbl <- table(debt_consol_data$debtIncRat, debt_consol_data$loan_status)
dbt_ratio_tbl
ggplot(as.data.frame(dbt_ratio_tbl), aes(x=Var1, y = Freq, fill=Var2)) +
labs(title = "Loan Status Debt Ratio", x = "Debt to Income Ratio", y = "Total Loans", color = "Loan Status") +
geom_bar(stat="identity", position = "dodge") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_discrete(name = "Loan Status")
library(gridExtra)
library(cowplot)
cor(loan_data[, sapply(loan_data, class) != 'factor' ]) # factors can't be in correlation
set.seed(312)
#names(subset(loan_data))
loan_data.selected_fields <- subset(loan_data, select = c(1, 3, 5:8, 11:14, 16:18, 27, 30))
sample_data <- sample.split(loan_data.selected_fields$loan_status, 0.80)
loan_data.training.data <- subset(loan_data.selected_fields, sample_data == TRUE)
loan_data.test.data <- subset(loan_data.selected_fields, sample_data == FALSE)
loan_data.model.full <- glm(loan_status ~ ., data = loan_data.training.data, family = "binomial")
summary(loan_data.model.full)
threshold = 0.5
prob_full <- predict(loan_data.model.full, newdata = loan_data.test.data, type = "response")
prob_cut <- ifelse(prob_full > threshold, 'Good', 'Bad')
cTab <- table(prob_cut, loan_data.test.data$loan_status)
v <- sum(diag(cTab)) / sum(cTab)
print(paste('Proportion correctly predicted = ', v))
vif(loan_data.model.full)
vif(loan_data.model.full)
vif(loan_data.model.full)
confusionMatrix(prob_cut, loan_data.test.data$loan_status, positive = 'Good')
threshold = 0.719
prob_full <- predict(loan_data.model.full, newdata = loan_data.test.data, type = "response")
prob_cut <- ifelse(prob_full > threshold, 'Good', 'Bad')
cTab <- table(prob_cut, loan_data.test.data$loan_status)
v <- sum(diag(cTab)) / sum(cTab)
print(paste('Proportion correctly predicted = ', v))
hist(prob_full)
confusionMatrix(prob_cut, loan_data.test.data$loan_status, positive = 'Good')
confusionMatrix(prob_cut, loan_data.test.data$loan_status, positive = 'Good')
set.seed(312)
#names(subset(loan_data))
loan_data.selected_fields <- subset(loan_data, select = c(1, 3, 5:8, 11:14, 16:18, 27, 30))
sample_data <- sample.split(loan_data.selected_fields$loan_status, 0.80)
loan_data.training.data <- subset(loan_data.selected_fields, sample_data == TRUE)
loan_data.test.data <- subset(loan_data.selected_fields, sample_data == FALSE)
loan_data.model.full <- glm(loan_status ~ ., data = loan_data.training.data, family = "binomial")
summary(loan_data.model.full)
threshold = 0.5
prob_full <- predict(loan_data.model.full, newdata = loan_data.test.data, type = "response")
prob_cut <- ifelse(prob_full > threshold, 'Good', 'Bad')
cTab <- table(prob_cut, loan_data.test.data$loan_status)
v <- sum(diag(cTab)) / sum(cTab)
print(paste('Proportion correctly predicted = ', v))
vif(loan_data.model.full)
confusionMatrix(prob_cut, loan_data.test.data$loan_status, positive = 'Good')
threshold = 0.719
prob_full <- predict(loan_data.model.full, newdata = loan_data.test.data, type = "response")
prob_cut <- ifelse(prob_full > threshold, 'Good', 'Bad')
cTab <- table(prob_cut, loan_data.test.data$loan_status)
v <- sum(diag(cTab)) / sum(cTab)
print(paste('Proportion correctly predicted = ', v))
hist(prob_full)
confusionMatrix(prob_cut, loan_data.test.data$loan_status, positive = 'Good')
balanced_sample <- ROSE(loan_status ~ ., data = loan_data.training.data, seed = 312)$data
balanced_sample$reason <- factor(loan_data.training.data$reason)
balanced.fit <- glm(loan_status ~ ., data = balanced_sample, family = "binomial")
balanced_pred <- predict(balanced.fit, newdata = loan_data.test.data, type = "response")
summary(balanced.fit)
hist(balanced_pred)
roc.curve(
loan_data.test.data$loan_status, balanced_pred,
col = "blue",
main="ROC curve")
threshold = 0.52
prob_cut <- ifelse(balanced_pred > threshold, 'Good', 'Bad')
confusionMatrix(prob_cut, loan_data.test.data$loan_status, positive = 'Good')
set.seed(312)
#
# Include the total paid field
#
loan_data.selected_fields <- subset(loan_data, select = c(1, 3, 5:8, 11:14, 16:19, 27, 30))
sample_data <- sample.split(loan_data.selected_fields$loan_status, 0.80)
loan_data.training.data <- subset(loan_data.selected_fields, sample_data == TRUE)
loan_data.test.data <- subset(loan_data.selected_fields, sample_data == FALSE)
prob_full <- predict(loan_data.model.full, newdata = loan_data.test.data, type = "response")
#
# Create a profit analysis on our model based from various thresholds
#
threshold_analysis <- data.frame(
threshold = numeric(),
fp_rate = numeric(),
profits = numeric(),
losses = numeric(),
missed = numeric(),
net = numeric(),
accuracy = numeric()
)
prob_full <- predict(loan_data.model.full, newdata = loan_data.test.data, type = "response")
for( threshold in seq(0.01, 0.99, by = 0.01) ) {
pred_cut <- stats::quantile(prob_full, threshold)
predicted_status <- if_else(prob_full > pred_cut, 'Good', 'Bad')
#actual <- lapply(loan_data.test.data$loan_status, as.character)
actual <- loan_data.test.data$loan_status
profit_tbl <- data.frame(
status = actual,
predicted_status,
total_paid = as.numeric(loan_data.test.data$totalPaid),
loan_amount = as.numeric(loan_data.test.data$amount)
)
fptp_tbl <- cbind(actual, predicted_status)
approved_loans <- fptp_tbl[predicted_status == 'Good', ]
# support for older version of R on my laptop
approved_loans[,1] <- if_else(approved_loans[,1] == '2', 'Good', 'Bad')
#
# profits include only loans we've accurately predicted to be good / paid off
#
profits_set <- subset(profit_tbl, status == 'Good' & predicted_status == 'Good' )
profits <- sum(profits_set$total_paid) - sum(profits_set$loan_amount)
#
# losses includes loans that are in a bad status, but we predicted as good
#
losses_set <- subset(profit_tbl, status == 'Bad' & predicted_status == 'Good')
losses <- sum(losses_set$loan_amount) - sum(losses_set$total_paid)
#
# Potential income, good loans we predicted in bad status
# won't classify as losses as we never took the risk of the loan
#
missed_set <- subset(profit_tbl, status == 'Good' & predicted_status == 'Bad')
missed <- sum(missed_set$total_paid) - sum(missed_set$loan_amount)
cTab <- table(predicted_status, loan_data.test.data$loan_status)
accuracy <- sum(diag(cTab)) / sum(cTab)
threshold_analysis[nrow(threshold_analysis) + 1,] = cbind(
threshold = threshold,
fp_rate = (sum(approved_loans == 'Bad') / length(approved_loans)),
profits = profits,
losses = losses,
missed = missed,
net = (profits - losses),
accuracy = accuracy
)
}
threshold_analysis[which.max(threshold_analysis$accuracy), ]
par(mfrow=c(1,2))
plot(threshold_analysis$accuracy, threshold_analysis$fp_rate,
main = 'Accuracy over FP-Rate',
xlab = 'Accuracy',
ylab = 'False-Positive Rate')
plot(threshold_analysis$threshold, threshold_analysis$accuracy,
main = 'Threshold over Accuracy',
xlab = 'Threshold',
ylab = 'Accuracy')
threshold_analysis[which.max(threshold_analysis$net), ]
par(mfrow=c(2,2))
plot(threshold_analysis$threshold, threshold_analysis$net,
main = 'Threshold over Net Profit',
xlab = 'Threshold',
ylab = 'Net Profit')
plot(threshold_analysis$threshold, threshold_analysis$missed,
main = 'Threshold over Missed Profit',
xlab = 'Threshold',
ylab = 'Missed Profit')
# Just confirming that as we increase the threshold, the FP rate decreases ( ROC curve depicts this )
plot(threshold_analysis$threshold, threshold_analysis$fp_rate,
main = 'Threshold over FP-Rate',
xlab = 'Threshold',
ylab = 'False-Positive Rate')
View(loan_data)
summary(loan_data)
